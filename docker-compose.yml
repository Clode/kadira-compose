version: '3.3'
networks:
  proxy:
    driver: bridge
services:
  mongo:
    ## Mongo database for both kadira-engine and kadira-ui
    image: mongo:3.4
    volumes:
      - "/data/db"
    command: mongod --smallfiles --replSet kadira
    networks:
      - proxy
    restart: always
    labels:
      - "traefik.enable=false"

  kadira-engine:
    ## This is the endpoint where Meteor app sends performance data
    image: vladgolubev/kadira-engine
    environment:
      - PORT=11011
      - MONGO_URL=mongodb://mongo/kadira?replicaSet=kadira
      - MONGO_SHARD_URL_one=mongodb://mongo/kadira?replicaSet=kadira
    networks:
      - proxy
    depends_on:
      - proxy
      - mongo
    restart: always
    labels:
      - "traefik.http.routers.kadira_engine.rule=Host(`${ENGINE_HOST}`)"
      - "traefik.http.routers.kadira_engine.entrypoints=websecure"
      - "traefik.http.routers.kadira_engine.tls=true"
      - "traefik.http.routers.kadira_engine.tls.certresolver=leresolver"
      - "traefik.http.services.kadira_engine.loadbalancer.server.port=11011"

  kadira-rma:
    ## This computes statistics databases every minute.
    image: vladgolubev/kadira-rma
    environment:
      - MONGO_URL=mongodb://mongo/kadira
    depends_on:
      - proxy
      - mongo
    networks:
      - proxy_proxy
    restart: always
    

  kadira-ui:
    ## Meteor app that presents the Kadira user interface.
    image: vladgolubev/kadira-ui
    #ports:
      #- "80:4000"
      #- "4000:4000"
    environment:
      - MONGO_URL=mongodb://mongo/kadira
      - MONGO_SHARD_URL_one=mongodb://mongo/kadira
    depends_on:
      - proxy
      - mongo
    restart: always
    networks:
      - proxy
    labels:
      - "traefik.http.routers.kadira_ui.rule=Host(`${UI_HOST}`)"
      - "traefik.http.routers.kadira_ui.entrypoints=websecure"
      - "traefik.http.routers.kadira_ui.tls=true"
      - "traefik.http.routers.kadira_ui.tls.certresolver=leresolver"
      - "traefik.http.services.kadira_ui.loadbalancer.server.port=4000"
  
  proxy:
    image: "traefik:v2.0.0"
    container_name: proxy
    networks:
      - proxy
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --api
      #- --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.leresolver.acme.email=${EMAIL}
      - --certificatesresolvers.leresolver.acme.storage=/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./acme.json:/acme.json"
    labels:
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`${DASHBOARD_HOST}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=leresolver"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${DASHBOARD_AUTH}" # user/password
      
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
  
